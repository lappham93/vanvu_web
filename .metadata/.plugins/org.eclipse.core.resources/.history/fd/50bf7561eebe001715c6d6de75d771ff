package com.mit.controllers;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.text.WordUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.mit.address.bodies.BillingAddressBody;
import com.mit.address.bodies.ShippingAddressBody;
import com.mit.address.entities.Country;
import com.mit.address.entities.State;
import com.mit.address.repositories.CountryRepo;
import com.mit.address.repositories.StateRepo;
import com.mit.address.responses.BillingAddressResponse;
import com.mit.address.responses.ListBillingAddressResponse;
import com.mit.address.responses.ListShippingAddressResponse;
import com.mit.address.responses.ShippingAddressResponse;
import com.mit.address.services.AddressService;
import com.mit.define.ApiError;
import com.mit.errcode.AddressErrCode;
import com.mit.http.ApiResponse;
import com.mit.session.entities.UserSession;
import com.mit.sessions.CheckoutSession;
import com.mit.sessions.SiteSession;
import com.mit.utils.ControllerUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@Api(value="Address API")
@RestController
@RequestMapping("/address")
public class AddressController {
	private Logger logger = LoggerFactory.getLogger(AddressController.class);
	@Autowired
	private CountryRepo countryRepo;
	@Autowired
	private AddressService addressService;
	@Autowired
	private StateRepo stateRepo;
	
	@ApiOperation(value = "List country", notes = "")
    @RequestMapping(value = "/country", method = RequestMethod.GET)
	public ApiResponse<List<Country>> getCountryList(HttpServletRequest request) {
		List<Country> countries = countryRepo.getList();
		return new ApiResponse<List<Country>>(countries);
	}
	
	@ApiOperation(value = "List state", notes = "")
    @RequestMapping(value = "/state", method = RequestMethod.GET)
	public ApiResponse<List<State>> getStateList(HttpServletRequest request,
			@RequestParam(value = "country") String countryCode) {
		List<State> states = stateRepo.getListActive(countryCode);
		if (states != null) {
			states.forEach(t -> t.setName(WordUtils.capitalizeFully(t.getName())));
		}
		return new ApiResponse<List<State>>(states);
	}
	
	@ApiOperation(value = "render shipping address list", notes = "")
    @RequestMapping(value = "/shippingAddress", method = RequestMethod.GET)
	public ModelAndView renderShippingAddress(HttpServletRequest request) {
		ModelAndView mav = ControllerUtils.initPage("shipping_address", null, "");
		UserSession session = (UserSession) (request.getAttribute("session"));
		ListShippingAddressResponse shippingAddresss = addressService.getShippingAddressList(session.getUserId());
		mav.addObject("address", shippingAddresss);
		mav.addObject("countries", countryRepo.getList());
		long defaultShippingAddressId = shippingAddresss.getDefaultId();
		if (defaultShippingAddressId <= 0 &&  !CollectionUtils.isEmpty(shippingAddresss.getAddresses())) {
			defaultShippingAddressId = shippingAddresss.getAddresses().get(0).getId();
		}
		mav.addObject("defaultAddressId", defaultShippingAddressId);
		return mav;
	}
	
	@ApiOperation(value = "get shipping address list", notes = "")
    @RequestMapping(value = "/shippingAddress/list", method = RequestMethod.GET)
	public ApiResponse<ListShippingAddressResponse> getShippingAddressList(HttpServletRequest request) {
		UserSession session = (UserSession) (request.getAttribute("session"));
		return new ApiResponse<>(addressService.getShippingAddressList(session.getUserId()));
	}
	
	@ApiOperation(value = "get shipping address list", notes = "")
    @RequestMapping(value = "/shippingAddress/item/{id}", method = RequestMethod.GET)
	public ApiResponse<ShippingAddressResponse> getShippingAddress(HttpServletRequest request,
			@PathVariable(value = "id") long id) {
		UserSession userSession = (UserSession) request.getAttribute("session");
		return new ApiResponse<>(addressService.getShippingAddress(id, userSession.getUserId()));
	}
	
	@ApiOperation(value = "add shipping address", notes = "Error codes: LIMIT_ADDRESS(-322), STATE_INVALID(-323), ZIPCODE_INVALID(-324)")
    @RequestMapping(value = "/shippingAddress/item", method = RequestMethod.POST)
	public ApiResponse<ShippingAddressResponse> addShippingAddress(HttpServletRequest request,
			@RequestBody ShippingAddressBody body) {
		UserSession session = (UserSession) (request.getAttribute("session"));
		body.setUserId(session.getUserId());
		Map<String, Object> postRs = addressService.addShippingAddress(body);
		int err = (int) postRs.get("err");
		if (err == AddressErrCode.SUCCESS) {
			ShippingAddressResponse shippingAddress = (ShippingAddressResponse)postRs.get("shippingAddress");
			CheckoutSession checkoutSession = SiteSession.getCheckout(request, true);
			checkoutSession.setShippingAddressId(shippingAddress.getId());
			SiteSession.setCheckout(request, checkoutSession);
			return new ApiResponse<>(shippingAddress);
		}
		if (err == AddressErrCode.LIMIT_ADDRESS) {
			return new ApiResponse<>(ApiError.LIMIT_ADDRESS);
		}
		if (err == AddressErrCode.STATE_INVALID) {
			return new ApiResponse<>(ApiError.STATE_INVALID);
		}
		if (err == AddressErrCode.ZIP_CODE_INVALID) {
			return new ApiResponse<>(ApiError.ZIPCODE_INVALID);
		}
		
		return new ApiResponse<>(ApiError.SERVER_ERROR);
	}
	
	@ApiOperation(value = "update shipping address", notes = "Error codes: ADDRESS_NOT_EXIST(-325), STATE_INVALID(-323), ZIPCODE_INVALID(-324)")
    @RequestMapping(value = "/shippingAddress/item/{id}", method = RequestMethod.PUT)
	public ApiResponse<ShippingAddressResponse> updateShippingAddress(HttpServletRequest request,
			@PathVariable(value = "id") long shippingAddressId,
			@RequestBody ShippingAddressBody body) {
		UserSession session = (UserSession) (request.getAttribute("session"));
		body.setUserId(session.getUserId());
		Map<String, Object> putRs = addressService.updateShippingAddress(shippingAddressId, body);
		int err = (int) putRs.get("err");
		if (err == AddressErrCode.SUCCESS) {
			ShippingAddressResponse shippingAddress = (ShippingAddressResponse)putRs.get("shippingAddress");
			CheckoutSession checkoutSession = SiteSession.getCheckout(request, true);
			checkoutSession.setShippingAddressId(shippingAddress.getId());
			SiteSession.setCheckout(request, checkoutSession);
			return new ApiResponse<>(shippingAddress);
		}
		if (err == AddressErrCode.ADDRESS_NOT_EXIST) {
			return new ApiResponse<>(ApiError.ADDRESS_NOT_EXIST);
		}
		if (err == AddressErrCode.STATE_INVALID) {
			return new ApiResponse<>(ApiError.STATE_INVALID);
		}
		if (err == AddressErrCode.ZIP_CODE_INVALID) {
			return new ApiResponse<>(ApiError.ZIPCODE_INVALID);
		}
		
		return new ApiResponse<>(ApiError.SERVER_ERROR);
	}
	
	@ApiOperation(value = "delete shipping address", notes = "")
    @RequestMapping(value = "/shippingAddress/item/{id}", method = RequestMethod.DELETE)
	public ApiResponse<Object> deleteShippingAddress(HttpServletRequest request,
			@PathVariable(value = "id") long shippingAddressId) {
		UserSession session = (UserSession) (request.getAttribute("session"));
		int err = addressService.deleteShippingAddress(session.getUserId(), shippingAddressId, "", "");
		if (err == AddressErrCode.SUCCESS) {
			return new ApiResponse<>();
		}
		
		return new ApiResponse<>(ApiError.SERVER_ERROR);
	}
	
	@ApiOperation(value = "render billing address list", notes = "")
    @RequestMapping(value = "/billingAddress", method = RequestMethod.GET)
	public ModelAndView renderBillingAddress(HttpServletRequest request) {
		ModelAndView mav = ControllerUtils.initPage("billing_address", null, "");
		UserSession session = (UserSession) (request.getAttribute("session"));
		ListBillingAddressResponse billingAddress = addressService.getBillingAddressList(session.getUserId());
		mav.addObject("address", billingAddress);
		mav.addObject("countries", countryRepo.getList());
		long defaultBillingAddressId = billingAddress.getDefaultId();
		if (defaultBillingAddressId <= 0 &&  !CollectionUtils.isEmpty(billingAddress.getAddresses())) {
			defaultBillingAddressId = billingAddress.getAddresses().get(0).getId();
		}
		mav.addObject("defaultAddressId", defaultBillingAddressId);
		return mav;
	}
	
	@ApiOperation(value = "get billing address", notes = "")
    @RequestMapping(value = "/billingAddress/item/{id}", method = RequestMethod.GET)
	public ApiResponse<BillingAddressResponse> getBillingAddress(HttpServletRequest request,
			@PathVariable(value = "id") long id) {
		UserSession userSession = (UserSession) request.getAttribute("session");
		return new ApiResponse<>(addressService.getBillingAddress(id, userSession.getUserId()));
	}
	
	@ApiOperation(value = "get billing address list", notes = "")
    @RequestMapping(value = "/billingAddress/list", method = RequestMethod.GET)
	public ApiResponse<ListBillingAddressResponse> getBillingAddressList(HttpServletRequest request) {
		UserSession session = (UserSession) (request.getAttribute("session"));
		return new ApiResponse<>(addressService.getBillingAddressList(session.getUserId()));
	}
	
	@ApiOperation(value = "add billing address", notes = "Error codes: LIMIT_ADDRESS(-322), STATE_INVALID(-323), ZIPCODE_INVALID(-324)")
    @RequestMapping(value = "/billingAddress/item", method = RequestMethod.POST)
	public ApiResponse<BillingAddressResponse> addBillingAddress(HttpServletRequest request,
			@RequestBody BillingAddressBody body) {
		UserSession session = (UserSession) (request.getAttribute("session"));
		body.setUserId(session.getUserId());
		Map<String, Object> postRs = addressService.addBillingAddress(body);
		int err = (int) postRs.get("err");
		if (err == AddressErrCode.SUCCESS) {
			BillingAddressResponse billingAddress = (BillingAddressResponse)postRs.get("billingAddress");
			CheckoutSession checkoutSession = SiteSession.getCheckout(request, true);
			checkoutSession.setBillingAddressId(billingAddress.getId()); 
			SiteSession.setCheckout(request, checkoutSession);
			return new ApiResponse<>(billingAddress);
		}
		if (err == AddressErrCode.LIMIT_ADDRESS) {
			return new ApiResponse<>(ApiError.LIMIT_ADDRESS);
		}
		if (err == AddressErrCode.STATE_INVALID) {
			return new ApiResponse<>(ApiError.STATE_INVALID);
		}
		if (err == AddressErrCode.ZIP_CODE_INVALID) {
			return new ApiResponse<>(ApiError.ZIPCODE_INVALID);
		}
		
		return new ApiResponse<>(ApiError.SERVER_ERROR);
	}
	
	@ApiOperation(value = "add billing address", notes = "Error codes: ADDRESS_NOT_EXIST(-325), STATE_INVALID(-323), ZIPCODE_INVALID(-324)")
    @RequestMapping(value = "/billingAddress/item/{id}", method = RequestMethod.PUT)
	public ApiResponse<BillingAddressResponse> updateBillingAddress(HttpServletRequest request,
			@PathVariable(value = "id") long billingAddressId,
			@RequestBody BillingAddressBody body) {
		UserSession session = (UserSession) (request.getAttribute("session"));
		body.setUserId(session.getUserId());
		Map<String, Object> putRs = addressService.updateBillingAddress(billingAddressId, body);
		int err = (int) putRs.get("err");
		if (err == AddressErrCode.SUCCESS) {
			BillingAddressResponse billingAddress = (BillingAddressResponse)putRs.get("billingAddress");
			CheckoutSession checkoutSession = SiteSession.getCheckout(request, true);
			checkoutSession.setBillingAddressId(billingAddress.getId()); 
			SiteSession.setCheckout(request, checkoutSession);
			return new ApiResponse<>(billingAddress);
		}
		if (err == AddressErrCode.ADDRESS_NOT_EXIST) {
			return new ApiResponse<>(ApiError.ADDRESS_NOT_EXIST);
		}
		if (err == AddressErrCode.STATE_INVALID) {
			return new ApiResponse<>(ApiError.STATE_INVALID);
		}
		if (err == AddressErrCode.ZIP_CODE_INVALID) {
			return new ApiResponse<>(ApiError.ZIPCODE_INVALID);
		}
		
		return new ApiResponse<>(ApiError.SERVER_ERROR);
	}
	
	@ApiOperation(value = "delete billing address", notes = "")
    @RequestMapping(value = "/billingAddress/item/{id}", method = RequestMethod.DELETE)
	public ApiResponse<Object> deleteBillingAddress(HttpServletRequest request,
			@PathVariable(value = "id") long billingAddressId) {
		UserSession session = (UserSession) (request.getAttribute("session"));
		int err = addressService.deleteBillingAddress(session.getUserId(), billingAddressId, "", "");
		if (err == AddressErrCode.SUCCESS) {
			return new ApiResponse<>();
		}
		
		return new ApiResponse<>(ApiError.SERVER_ERROR);
	}
}
